/* tslint:disable */
/* eslint-disable */
/**
 * MotherOfLearningGameWeb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CompanyCharacterAddDto,
  CompanyDto,
  CompanyUpdateDto,
} from '../models/index';
import {
    CompanyCharacterAddDtoFromJSON,
    CompanyCharacterAddDtoToJSON,
    CompanyDtoFromJSON,
    CompanyDtoToJSON,
    CompanyUpdateDtoFromJSON,
    CompanyUpdateDtoToJSON,
} from '../models/index';

export interface CompanyCompanyCharacterAddPostRequest {
    companyCharacterAddDto?: CompanyCharacterAddDto;
}

export interface CompanyCompanyUpdatePostRequest {
    companyUpdateDto?: CompanyUpdateDto;
}

/**
 * 
 */
export class CompanyApi extends runtime.BaseAPI {

    /**
     */
    async companyCompanyCharacterAddPostRaw(requestParameters: CompanyCompanyCharacterAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Company/companyCharacterAdd`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyCharacterAddDtoToJSON(requestParameters.companyCharacterAddDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async companyCompanyCharacterAddPost(requestParameters: CompanyCompanyCharacterAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.companyCompanyCharacterAddPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async companyCompanyUpdatePostRaw(requestParameters: CompanyCompanyUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Company/companyUpdate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyUpdateDtoToJSON(requestParameters.companyUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyDtoFromJSON(jsonValue));
    }

    /**
     */
    async companyCompanyUpdatePost(requestParameters: CompanyCompanyUpdatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyDto> {
        const response = await this.companyCompanyUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async companyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CompanyDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Company`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyDtoFromJSON));
    }

    /**
     */
    async companyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CompanyDto>> {
        const response = await this.companyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async companyPutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Company`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyDtoFromJSON(jsonValue));
    }

    /**
     */
    async companyPut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyDto> {
        const response = await this.companyPutRaw(initOverrides);
        return await response.value();
    }

}
